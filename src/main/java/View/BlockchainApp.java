/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package View;

import Blockchain.Block;
import javax.swing.JOptionPane;

import Mining.Mining;
import Networking.BlockAddedListener;
import Networking.Node;
import Wallet.Wallet;
import Transaction.Transaction;
import Util.StringUtil;
import java.awt.Component;
import java.awt.Dimension;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;
import java.util.Scanner;
import java.util.stream.Stream;
import javax.swing.JFileChooser;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.SwingUtilities;
import javax.swing.Timer;
/*
/**
 *
 * @author nick
 */
public class BlockchainApp extends javax.swing.JFrame implements BlockAddedListener {

    private Node node;
private javax.swing.Timer connectionStatusTimer;
    private Wallet wallet;


    private Mining mining;
    private Timer connectionCheckTimer;
    private Timer updateTimer;

    /**
     * Creates new form BlockchainApp
     */
    

public BlockchainApp() {
    try {
        node = new Node("127.0.0.1", 5002, "blockchain2.dat");
        node.addBlockAddedListener(this);
        new Thread(node).start(); // Start the networking thread

        connectionCheckTimer = new Timer(1000, e -> checkNodeConnection());
        connectionCheckTimer.start();
        


        
    } catch (IOException e) {
        e.printStackTrace();
    }
    initComponents();

    disableActions(); // Disable all actions that require a wallet
}


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        actionPanel = new javax.swing.JPanel();
        balanceLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jToggleButton1 = new javax.swing.JToggleButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton1 = new javax.swing.JRadioButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        balanceLabel.setText("balance");
        balanceLabel.setToolTipText("");

        jLabel1.setText("Transactions List");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton1.setText("Send");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Receive");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jToggleButton1.setText("Start/Stop mining");
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });

        jRadioButton2.setText("mining");
        jRadioButton2.setEnabled(false);

        jRadioButton1.setText("Node Connected");
        jRadioButton1.setEnabled(false);
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout actionPanelLayout = new javax.swing.GroupLayout(actionPanel);
        actionPanel.setLayout(actionPanelLayout);
        actionPanelLayout.setHorizontalGroup(
            actionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(actionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(actionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, actionPanelLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(balanceLabel))
                    .addGroup(actionPanelLayout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 145, Short.MAX_VALUE)
                        .addComponent(jToggleButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButton1)))
                .addContainerGap())
        );
        actionPanelLayout.setVerticalGroup(
            actionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(actionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(actionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(balanceLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 446, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(actionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton1)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jToggleButton1)
                    .addComponent(jRadioButton2))
                .addContainerGap())
        );

        jMenu1.setText("File");

        jMenuItem1.setText("Create New Wallet");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Open Existing Wallet");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(actionPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(actionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Select a Wallet File");
        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            String password = JOptionPane.showInputDialog(this, "Enter wallet password:");
            if (password != null) {
                wallet = StringUtil.loadWalletFromFile(selectedFile.getAbsolutePath(), password);
                if (wallet != null) {
                    JOptionPane.showMessageDialog(this, "Wallet loaded: " + selectedFile.getName());
                } else {
                    JOptionPane.showMessageDialog(this, "Failed to load wallet.");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Wallet loading cancelled.");
            }
        }
        if (wallet != null) {
            enableActions();
            wallet.setUTXOPool(node.getUTXOPool());
            updateBalance();
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
                                       
        // Open a dialog to get recipient address and amount, then send funds
        String recipientAddress = JOptionPane.showInputDialog(this, "Enter recipient's address:");
        String amountString = JOptionPane.showInputDialog(this, "Enter amount to send:");
        long amount = Long.parseLong(amountString); // Add error handling for number format
        wallet.sendFunds(recipientAddress, amount);
        // Update the GUI, e.g., refresh balance or transaction list


    }//GEN-LAST:event_jRadioButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
                                      
    String address = wallet.generateAddress();
    
    // Create a JTextArea to display the address
    JTextArea addressArea = new JTextArea(address);
    addressArea.setEditable(false); // Make it non-editable
    addressArea.setWrapStyleWord(true); // Wrap long addresses
    addressArea.setLineWrap(true);
    addressArea.setCaretPosition(0); // Set caret position at the beginning for easy selection

    // Create a JScrollPane to enable scrolling if address is too long
    JScrollPane scrollPane = new JScrollPane(addressArea); 
    scrollPane.setPreferredSize(new Dimension(250, 70)); // Set preferred size for scroll pane

    // Show the JOptionPane with the scrollable JTextArea
    JOptionPane.showMessageDialog(this, scrollPane, "Your Address", JOptionPane.INFORMATION_MESSAGE);

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        wallet= new Wallet();
        String password = JOptionPane.showInputDialog(this, "Enter a password for the new wallet:");
        if (password != null && !password.isEmpty()) {
            String walletName = "wallet_" + System.currentTimeMillis() + ".dat";
            StringUtil.saveWalletToFile(wallet, walletName, password);
            JOptionPane.showMessageDialog(this, "New wallet created: " + walletName);
        } else {
            JOptionPane.showMessageDialog(this, "Wallet creation cancelled.");
        }
        enableActions();
        wallet.setUTXOPool(node.getUTXOPool());
        updateBalance();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        if (jToggleButton1.isSelected()) {
            // Start mining
            mining = new Mining(node, wallet);
            Thread miningThread = new Thread(mining);
            miningThread.start();
            jRadioButton2.setSelected(true);
            jToggleButton1.setText("Stop Mining");
        } else {
            // Stop mining
            if (mining != null) {
                mining.stopMining();
            }
            jRadioButton2.setSelected(false);
            jToggleButton1.setText("Start Mining");
        }
    }//GEN-LAST:event_jToggleButton1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            String recipientAddress = JOptionPane.showInputDialog(this, "Enter recipient's address:");
            if (recipientAddress == null || recipientAddress.trim().isEmpty()) {
                throw new IllegalArgumentException("Recipient address cannot be empty.");
            }
            String amountString = JOptionPane.showInputDialog(this, "Enter amount to send:");
            long amount = Long.parseLong(amountString);
            wallet.sendFunds(recipientAddress, amount);
            JOptionPane.showMessageDialog(this, "Funds sent successfully.");
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid amount format.");
        } catch (IllegalArgumentException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error sending funds: " + e.getMessage());
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BlockchainApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BlockchainApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BlockchainApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BlockchainApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {

            new BlockchainApp().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel actionPanel;
    private javax.swing.JLabel balanceLabel;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JToggleButton jToggleButton1;
    // End of variables declaration//GEN-END:variables







    
    private Wallet createNewWallet() {
        Wallet newWallet = new Wallet();
        String walletName = "wallet_" + System.currentTimeMillis() + ".dat";
        System.out.println("New wallet created: " + walletName);
        return newWallet; // Return the new wallet
    }




    private void listAvailableWallets() {
        try (Stream<Path> paths = Files.walk(Paths.get("./"))) {
            paths.filter(Files::isRegularFile)
                 .filter(path -> path.toString().startsWith("./wallet_"))
                 .forEach(System.out::println);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    

    private void shutdownApplication() {
        if (node != null) {
            node.shutdown();
        }
        System.out.println("Application shutting down...");
        System.exit(0);
    }
    private void checkBalance() {
        // Implement the logic to check balance
        System.out.println("Balance: " + wallet.getBalance());
    }

    private void receive() {
        try {
            String address = wallet.generateAddress();
            System.out.println("address:\n\n"+address+"\n\n");
        } catch (Exception e) {
          e.printStackTrace();
        }
    }

    private void send() {
        Scanner scanner = new Scanner(System.in);

        // Prompt for recipient's address
        System.out.print("Enter the recipient's address: ");
        String recipientAddress = scanner.nextLine();

        // Prompt for the amount to send
        System.out.print("Enter the amount to send: ");
        long amount = scanner.nextLong();
        scanner.nextLine(); // Consume the remaining newline
        
        wallet.sendFunds(recipientAddress, amount);
        

    }

    private void auditTotalSupply() {
        System.out.println("Total Coins:" + node.getTotalCoins());
    }
    public void startMine() {
    System.out.println("Starting mining...");
    mining = new Mining(node, wallet);
    Thread miningThread = new Thread(mining);
    miningThread.start(); // Start the mining thread1
        
        
        Thread controlThread = new Thread(() -> {
            try {
                while (true) {
                    if (System.in.available() > 0 && System.in.read() == ' ') {
                        mining.stopMining();
                        miningThread.interrupt();
                        break;
                    }
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        });

        controlThread.start(); // Start the control thread
        try {
            miningThread.join(); // Wait for the mining thread to finish
            controlThread.interrupt(); // Stop the control thread
            controlThread.join(); // Wait for the control thread to finish
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }


    private void getTXList() {
        List<Transaction> transactions = wallet.getMyTransactions(node.getBlockchain());
        if (transactions.isEmpty()) {
            System.out.println("No transactions found for this wallet.");
        } else {
            System.out.println("Transactions for Wallet Address: " + wallet.generateAddress());
            System.out.println("---------------------------------------------------");
            for (Transaction transaction : transactions) {
                String senderAddress = transaction.getSenderAddress(); // Assuming these methods exist in Transaction class
                String recipientAddress = transaction.getRecipientAddress();
                long value = transaction.getValue();
                String transactionId = transaction.getTransactionId();

                System.out.println("Transaction ID: " + transactionId);
                System.out.println("Sender Address: " + senderAddress);
                System.out.println("Recipient Address: " + recipientAddress);
                System.out.println("Amount: " + value);
                System.out.println("---------------------------------------------------");
            }
        }
    }

private void updateTransactionList() {
        System.out.println("Updating transactions..."); // Log message
    List<Transaction> transactions = wallet.getMyTransactions(node.getBlockchain());
    jTextArea1.setText(""); // Clear previous text
    if (transactions.isEmpty()) {
        jTextArea1.append("No transactions found for this wallet.\n");
    } else {
        for (Transaction transaction : transactions) {
            jTextArea1.append("Transaction ID: " + transaction.getTransactionId() + "\n");
            jTextArea1.append("Sender: " + transaction.getSenderAddress() + "\n");
            jTextArea1.append("Recipient: " + transaction.getRecipientAddress() + "\n");
            jTextArea1.append("Amount: " + transaction.getValue() + "\n");
            jTextArea1.append("---------------------------------------------------\n");
        }
    }
        actionPanel.repaint();
}
// Method to update balance
private void updateBalance() {
        System.out.println("Updating balance..."); // Log message
    balanceLabel.setText("Balance: " + wallet.getBalance());
    actionPanel.repaint();
}


// Method to check node connection
private void checkNodeConnection() {
    jRadioButton1.setSelected(node.hasActiveConnections());
}

private void disableActions() {
    for (Component comp : actionPanel.getComponents()) {
        comp.setEnabled(false);
    }
}
private void enableActions() {
    for (Component comp : actionPanel.getComponents()) {
        comp.setEnabled(true);
    }

}

    @Override
    public void onBlockAdded(Block block) {
        SwingUtilities.invokeLater(() -> {
            updateBalance();
            updateTransactionList();
        });
    }


}
